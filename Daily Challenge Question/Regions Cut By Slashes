var regionsBySlashes = function (grid) {
  let n = grid.length;
  let visited = Array(n + 1).fill();
  for (let i = 0; i <= n; i++) visited[i] = Array(n + 1).fill();

  let v = (n + 1) ** 2;
  let e = n * 4;
  let c = 0;

  function dfs(r, c) {
    visited[r][c] = 1;
    if (r == 0 || r == n) {
      if (c > 0 && !visited[r][c - 1]) dfs(r, c - 1);
      if (c < n && !visited[r][c + 1]) dfs(r, c + 1);
    }
    if (c == 0 || c == n) {
      if (r > 0 && !visited[r - 1][c]) dfs(r - 1, c);
      if (r < n && !visited[r + 1][c]) dfs(r + 1, c);
    }

    if (r < n && c < n && !visited[r + 1][c + 1] && grid[r][c] == "\\")
      dfs(r + 1, c + 1);
    if (r < n && c > 0 && !visited[r + 1][c - 1] && grid[r][c - 1] == "/")
      dfs(r + 1, c - 1);
    if (r > 0 && c < n && !visited[r - 1][c + 1] && grid[r - 1][c] == "/")
      dfs(r - 1, c + 1);
    if (r > 0 && c > 0 && !visited[r - 1][c - 1] && grid[r - 1][c - 1] == "\\")
      dfs(r - 1, c - 1);
  }

  for (let i = 0; i <= n; i++) {
    for (let j = 0; j <= n; j++) {
      if (grid[i]?.[j] && grid[i][j] != " ") e++;
      if (!visited[i][j]) {
        c++;
        dfs(i, j);
      }
    }
  }

  return e - v + c;
};
